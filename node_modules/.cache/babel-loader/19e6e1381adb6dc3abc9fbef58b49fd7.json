{"ast":null,"code":"export const refreshTokenSetup = res => {\n  // Timing to renew access token\n  let refreshTiming = (res.tokenObj.expires_in || 3600 - 5 * 60) * 1000;\n\n  const refreshToken = async () => {\n    const newAuthRes = await res.reloadAuthResponse();\n    refreshTiming = (newAuthRes.expires_in || 3600 - 5 * 60) * 1000;\n    console.log('newAuthRes:', newAuthRes); // saveUserToken(newAuthRes.access_token);  <-- save new token\n\n    localStorage.setItem('authToken', newAuthRes.id_token); // Setup the other timer after the first one\n\n    setTimeout(refreshToken, refreshTiming);\n  }; // Setup first refresh timer\n\n\n  setTimeout(refreshToken, refreshTiming);\n};","map":{"version":3,"sources":["/Users/denise/Developer/essay-dashboard/src/components/Login/RefreshToken.js"],"names":["refreshTokenSetup","res","refreshTiming","tokenObj","expires_in","refreshToken","newAuthRes","reloadAuthResponse","console","log","localStorage","setItem","id_token","setTimeout"],"mappings":"AAAA,OAAO,MAAMA,iBAAiB,GAAIC,GAAD,IAAS;AACtC;AACA,MAAIC,aAAa,GAAG,CAACD,GAAG,CAACE,QAAJ,CAAaC,UAAb,IAA2B,OAAO,IAAI,EAAvC,IAA6C,IAAjE;;AAEA,QAAMC,YAAY,GAAG,YAAY;AAC/B,UAAMC,UAAU,GAAG,MAAML,GAAG,CAACM,kBAAJ,EAAzB;AACAL,IAAAA,aAAa,GAAG,CAACI,UAAU,CAACF,UAAX,IAAyB,OAAO,IAAI,EAArC,IAA2C,IAA3D;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,UAA3B,EAH+B,CAI/B;;AACAI,IAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCL,UAAU,CAACM,QAA7C,EAL+B,CAO/B;;AACAC,IAAAA,UAAU,CAACR,YAAD,EAAeH,aAAf,CAAV;AACD,GATD,CAJsC,CAetC;;;AACAW,EAAAA,UAAU,CAACR,YAAD,EAAeH,aAAf,CAAV;AACD,CAjBI","sourcesContent":["export const refreshTokenSetup = (res) => {\n    // Timing to renew access token\n    let refreshTiming = (res.tokenObj.expires_in || 3600 - 5 * 60) * 1000;\n  \n    const refreshToken = async () => {\n      const newAuthRes = await res.reloadAuthResponse();\n      refreshTiming = (newAuthRes.expires_in || 3600 - 5 * 60) * 1000;\n      console.log('newAuthRes:', newAuthRes);\n      // saveUserToken(newAuthRes.access_token);  <-- save new token\n      localStorage.setItem('authToken', newAuthRes.id_token);\n  \n      // Setup the other timer after the first one\n      setTimeout(refreshToken, refreshTiming);\n    };\n  \n    // Setup first refresh timer\n    setTimeout(refreshToken, refreshTiming);\n  };"]},"metadata":{},"sourceType":"module"}